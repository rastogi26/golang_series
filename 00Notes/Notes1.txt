1. Go is compiled language.
2. Go is suitable with cloud.
3. Go is object oriented? Yes and No
4. Missing =  try catch 
5. lexer does lot of work. (even if you not write semicolon it will not give you error because lexer is providing it).
6. go mod init name
7. fmt package
8. go automatically clean or unclean the packages which you need or not need.
9. go run main.go  command to run code.
10. go help
11. go is case sensitive
12. go env GOPATH = to find the path
13. lexer job is to simply understand that you following the grammaer of the language so that your syntax is correct , variable is defined properly.
14. In go everything is Type 
15. var number int 
    fmt.Println(number)

    //output will be 0 , if not initailise it does not give garbage value.
    //In case of string it give empty space
16. Inside any method we can use walrus := operator but not outside.
17. const Key = "jfhdjhfjd" // public because first letter(K) is capital
18. bufio 
19. comma ok ||  comma err 
20. input is type of string.
21. Time format 
    fmt.Println(Time.Format("01-02-2006 15:04:05 Monday"))
22. go env 
23. Build application for linux , windows and mac in powershell are:-
    $env:GOOS = "windows"; go build
    $env:GOOS = "linux"; go build
    $env:GOOS = "darwin"; go build

    And in bash :-
    GOOS=darwin go build
24. Memory Management:-
    1. Memory allocation and deallocation happens automatically.
    2. 2 methods new() and make()
    3. new():- a. Allocate memory but not INIT (intialized)
               b. you will get a memory address
               c. zeroed storage (you can not put any data initally).
       make():- a. Allocate memory and init.
                b. you will get a memory address.
                c. non-zeroed storage(you can put data initally).
                d.make(typeOfdata,size) eg make([]int,4) int slice of size 4
    4. GC(garbage collector) happens automatically.

25. var ptr *int 
    If you intialise a pointer its default value is <nil>.

26. In slice fruitList[1:3]
    eg slice = {apple,orange,banana,peach}
    ans = {orange,banana}

27. //how to remove value from slice
	var courses = []string{"reactjs","python","ruby","swift","c++"}
	fmt.Println(courses)

	var index int = 2
    // we use ... so that append method accepts more arguments than what is just meant for (eg in this case it is 1).
	courses = append(courses[:index], courses[index+1:]... )
	fmt.Println("Updated Courses:", courses)

28. No interitance, no super or parent in golang.

29. In go ++count is invalid.

30. (... called variatic function) used to accept various values
    func main() {

     proRes,message := proAdder(2,4,3,4,5,1,2,3,34)
	 fmt.Println("Pro_Result is ",proRes)
	 fmt.Println(message)
    }

    func proAdder(values... int)(int,string){
	total :=0
	
	for _,val := range values{
		total += val;
	}
	return total,"Job Done"
    }

31. defer, remember 2 things:-
    1. execute at last.
    2. if more than 1 defer they execute in LIFO manner.

32.  ReadResponse nor Response.Write ever closes a connection.
     response.Body.close()

33. Response is a type of = *http.Response (getting actual refence not copy).

34. omitempty means if the value is null/nil dont throw that field at all.

35. we get response in byte form and then covert it into string.

   ******MOD START********
36. one of the job is to initailise it and it gives the idea of some third party that this entire code is dependent on which version of go.


37. go sum is build to avoid attacks. It does a check on the repository you are pulling which has has hash and if anything changes in this repository in this special version then the hash is going to fail.

38. go mod verify = used to check if all the modules are verified i.e no malicus thing.


39. Everything comes from the web comes in byte format.

40. go mod tidy is a command that synchronizes the go. mod file with the actual dependencies used in the codebase. go mod tidy : Adds missing and removes unused modules and dependencies from the go. 
    It is an expensive operation.

41. list operation is expensive.
    go list all = give a list of all the packages or dependencies installed in the application.
    go list -m all = gives the list of all dependencies which are used/dependent in your application.
    go list -m -versions github.com/gorilla/mux = gives all the verions of gorilla mux in ascening order.

42. go mod why github.com/gorilla/mux = tells which module is dependent on gorilla mux.

43. go mod graph = gives graph of the all dependencies.

44. go mod edit  = to edit module file(optional)

45. go mod vendor = you build your application only with dependency packages that are stored inside your project under the vendor directory. In this mode, Go commands ignore dependency descriptions in go. mod and assume that the vendor directory holds the correct copies of dependencies.
     
    if you run this command = "go run main.go" them it will bring everthing from web or cache but not from vendor, that can be your modified version.
    So use this command if create vendor = "go run -mod=vendor main.go"

     ******MOD END********

46. Concurrency is when two or more tasks can start, run, and complete in overlapping time periods. It doesn't necessarily mean they'll ever both be running at the same instant. For example, multitasking on a single-core machine. 
    Parallelism is when tasks literally run at the same time, e.g., on a multicore processor. 
     
47. Goroutines help to achive parallelism.

48. Goroutines managed by go runtime and flexible stack = 2KB.
    Threads managed by os and flexible stack = 1MB.

49. Slogan for GO - Do not communicate by sharing memory;instead,share memory by communicating.

50. A Mutex is a method used as a locking mechanism to ensure that only one Goroutine is accessing the critical section of code at any point of time. This is done to prevent race conditions from happening. Sync package contains the Mutex. Two methods defined on Mutex
      Lock
      Unlock
    (sync.Mutex)

51. go run --race to check if there is race condition or not.

52. Channels are a way for various goroutines to communicate in Golang, or Go.

53.
