1. Go is compiled language.
2. Go is suitable with cloud.
3. Go is object oriented? Yes and No
4. Missing =  try catch 
5. lexer does lot of work. (even if you not write semicolon it will not give you error because lexer is providing it).
6. go mod init name
7. fmt package
8. go automatically clean or unclean the packages which you need or not need.
9. go run main.go  command to run code.
10. go help
11. go is case sensitive
12. go env GOPATH = to find the path
13. lexer job is to simply understand that you following the grammaer of the language so that your syntax is correct , variable is defined properly.
14. In go everything is Type 
15. var number int 
    fmt.Println(number)

    //output will be 0 , if not initailise it does not give garbage value.
    //In case of string it give empty space
16. Inside any method we can use walrus := operator but not outside.
17. const Key = "jfhdjhfjd" // public because first letter(K) is capital
18. bufio 
19. comma ok ||  comma err 
20. input is type of string.
21. Time format 
    fmt.Println(Time.Format("01-02-2006 15:04:05 Monday"))
22. go env 
23. Build application for linux , windows and mac in powershell are:-
    $env:GOOS = "windows"; go build
    $env:GOOS = "linux"; go build
    $env:GOOS = "darwin"; go build

    And in bash :-
    GOOS=darwin go build
24. Memory Management:-
    1. Memory allocation and deallocation happens automatically.
    2. 2 methods new() and make()
    3. new():- a. Allocate memory but not INIT (intialized)
               b. you will get a memory address
               c. zeroed storage (you can not put any data initally).
       make():- a. Allocate memory and init.
                b. you will get a memory address.
                c. non-zeroed storage(you can put data initally).
                d.make(typeOfdata,size) eg make([]int,4) int slice of size 4
    4. GC(garbage collector) happens automatically.

25. var ptr *int 
    If you intialise a pointer its default value is <nil>.

26. In slice fruitList[1:3]
    eg slice = {apple,orange,banana,peach}
    ans = {orange,banana}

27. //how to remove value from slice
	var courses = []string{"reactjs","python","ruby","swift","c++"}
	fmt.Println(courses)

	var index int = 2
    // we use ... so that append method accepts more arguments than what is just meant for (eg in this case it is 1).
	courses = append(courses[:index], courses[index+1:]... )
	fmt.Println("Updated Courses:", courses)

28. No interitance, no super or parent in golang.

29. In go ++count is invalid.

30. (... called variatic function) used to accept various values
    func main() {

     proRes,message := proAdder(2,4,3,4,5,1,2,3,34)
	 fmt.Println("Pro_Result is ",proRes)
	 fmt.Println(message)
    }

    func proAdder(values... int)(int,string){
	total :=0
	
	for _,val := range values{
		total += val;
	}
	return total,"Job Done"
    }

31. defer, remember 2 things:-
    1. execute at last.
    2. if more than 1 defer they execute in LIFO manner.

32. 
